<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    The purpose of this target is to disable the Pack flag when we ourselves are attempting to create a nuget package with the AnyCPU build configuration.
    Due to the recursive nature of building for AnyCPU, we must inform the nugetizer build that we do not need to pack any duplicate files again.
    The project references that do not explicitly have the <Pack> metadata must be modified to have it or else the nugetizer calls to these projects will fail.
    For this reason we must modify the project references before nugetizer depends on them to have the proper metadata.
  -->
  <Target Name="DisableVcxprojPack" BeforeTargets="BeforeResolveReferences" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true' AND '$(Platform)' == 'AnyCPU'">
    <ItemGroup>
      <_ProjectReferencesWithPack Include="@(ProjectReference->HasMetadata('Pack'))" />
      <_ProjectReferencesWithoutPack Include="@(ProjectReference)" />
      <_ProjectReferencesWithoutPack Remove="@(_ProjectReferencesWithPack)"/>
      <_ProjectReferencesWithoutPack Condition="'%(Extension)' == '.vcxproj'">
          <Pack>false</Pack>
      </_ProjectReferencesWithoutPack>
      <ProjectReference Remove="@(ProjectReference)"/>
      <ProjectReference Include="@(_ProjectReferencesWithPack)"/>
      <ProjectReference Include="@(_ProjectReferencesWithoutPack)"/>
    </ItemGroup>
  </Target>

  <Target Name="AddSingleConfigBuildOutput"  Returns="@(_PackageContentsForPlat)"> 
    <MSBuild Projects="$(SolutionPath)"
       Targets="GetSolutionConfigurationContents"
       Properties="Configuration=$(Configuration);Platform=$(Platform)">
      <Output TaskParameter="TargetOutputs" ItemName="_SolutionConfigurationContents" />
    </MSBuild>

    <Message Text="AddSingleConfigBuildOutput Platform: $(Platform)" Importance="High"/>

    <MSBuild Projects="$(MSBuildProjectFile)"
       Targets="GetPackageContents"
       Properties="SkipGetPackageContentsForOtherPlatforms=true;BuildingInsideVisualStudio=false;BuildProjectReferences=true;Configuration=$(Configuration);Platform=$(Platform);CurrentSolutionConfigurationContents=%(_SolutionConfigurationContents.Identity);">
      <Output TaskParameter="TargetOutputs" ItemName="_PackageContentsForPlat" />
    </MSBuild>
  </Target>

  <Target Name="AddOtherConfigsBuiltOutput" BeforeTargets="GetPackageContents" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true' AND '$(Platform)' == 'AnyCPU'">

    <ItemGroup>
      <_PackTargetPlat Include="%(ProjectConfiguration.Platform)"
              Condition="'%(ProjectConfiguration.Configuration)' == '$(Configuration)' AND '%(ProjectConfiguration.Platform)' != '$(Platform)'" />
    </ItemGroup>
    
    <MSBuild Projects="$(MSBuildProjectFile)"
         Targets="AddSingleConfigBuildOutput"
         Properties="Platform=%(_PackTargetPlat.Identity)">
      <Output TaskParameter="TargetOutputs" ItemName="_OtherPackageContents" />
    </MSBuild>

    <ItemGroup>
      <PackageFile Include="@(_OtherPackageContents)" />
    </ItemGroup>

  </Target>

  <!-- 
    In the above AddSingleConfigBuildOutput target, several properties are injected into this project so that this project knows 
    if its being multiplexed or not. Don't pass on this extra information to project references as it can cause issues with MSBuild 
    knowing if a project is already built.
  -->
  <Target Name="RemoveGlobalPropertiesFromMultiplexing" BeforeTargets="BeforeResolveReferences">
    <PropertyGroup>
      <_GlobalPropertiesToRemove>BuildingPackage;</_GlobalPropertiesToRemove>
      <_GlobalPropertiesToRemove Condition="'$(SkipGetPackageContentsForOtherPlatforms)' == 'true'">$(_GlobalPropertiesToRemove);SkipGetPackageContentsForOtherPlatforms;</_GlobalPropertiesToRemove>
    </PropertyGroup>
    <ItemGroup>
      <ProjectReference>
        <GlobalPropertiesToRemove>%(ProjectReference.GlobalPropertiesToRemove);$(_GlobalPropertiesToRemove);</GlobalPropertiesToRemove>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <!--
    Add in ResovleReferences for NUPROJ version calculation. This is because the .nuproj files depend on the NuprojInitializer
    to create the solution wide timestamp file used for uniform versioning of packages. 
  -->
  <PropertyGroup>
    <CalculatePackageVersionDependsOn>ResolveReferences;$(CalculatePackageVersionDependsOn)</CalculatePackageVersionDependsOn>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)\winobjc.versioning.common.targets"/>

  <ItemGroup>
    <ProjectReference Include="$(MsBuildThisFileDirectory)\NuprojInitializer.msbuildproj" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true'">
      <IncludeInPackage>false</IncludeInPackage>
      <Private>false</Private>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
    </ProjectReference>
  </ItemGroup>
</Project>